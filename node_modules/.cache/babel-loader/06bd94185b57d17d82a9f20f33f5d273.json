{"ast":null,"code":"var _jsxFileName = \"/Users/heuchertc/sei/projects/lessthan30_django_env/lessthan30_frontend/src/components/Poems/WordPanel.js\";\nimport React, { Component } from 'react'; // declare 'require()' imports at the top of your script\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst fs = require('fs'); // style blocks\n\n\nconst panel = {\n  position: 'absolute',\n  right: '10px',\n  width: '200px',\n  height: '500px',\n  border: '1px solid #000',\n  padding: '2px'\n};\nconst position = {\n  position: 'absolute',\n  right: '50px',\n  top: '100px'\n};\n\nclass WordPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      wordList: []\n    };\n  }\n\n  componentDidMount() {} // print random amount of words from a text file: https://stackoverflow.com/questions/56243621/print-random-amount-of-words-from-a-text-file\n\n\n  randomWords() {\n    // Since you use 'readFileSync', there is no callback function\n    var readME = fs.readFileSync('lessthan30_frontend/public/wordlist10000.txt', 'utf8'); // Split the string into an array\n\n    var wordArr = readME.split(','); // Create empty array\n\n    var randWords = []; // push a random word to the new array n times\n\n    for (let i = 0; i < 30; i++) {\n      // new random number\n      let newRandom;\n\n      do {\n        // New random index based on the length of the array (word count)\n        let rand = Math.floor(Math.random() * wordArr.length);\n        newRandom = wordArr[rand];\n      } // Make sure we don't have duplicates\n      while (randWords.includes(newRandom)); // Add the new word to the array\n\n\n      randWords.push(newRandom);\n    } // Join the array to a string and return it\n\n\n    return randWords;\n  }\n\n  render() {\n    // variable to hold the state \n    const {\n      wordList\n    } = this.state;\n\n    if (wordList === null) {\n      return 'Loading...';\n    }\n\n    let wordListJSX;\n    wordListJSX = wordList.map(word => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: word\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-light\",\n          children: \"Add Word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this)\n      }, void 0, false)]\n    }, word, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this));\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: position,\n        children: \"Todays Words\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: panel,\n        children: [\"eggs\", /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: wordListJSX\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default WordPanel;","map":{"version":3,"sources":["/Users/heuchertc/sei/projects/lessthan30_django_env/lessthan30_frontend/src/components/Poems/WordPanel.js"],"names":["React","Component","fs","require","panel","position","right","width","height","border","padding","top","WordPanel","constructor","props","state","wordList","componentDidMount","randomWords","readME","readFileSync","wordArr","split","randWords","i","newRandom","rand","Math","floor","random","length","includes","push","render","wordListJSX","map","word"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;;;;AACA,MAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB,C,CAEA;;;AACA,MAAMC,KAAK,GAAG;AACZC,EAAAA,QAAQ,EAAE,UADE;AAEZC,EAAAA,KAAK,EAAE,MAFK;AAGZC,EAAAA,KAAK,EAAE,OAHK;AAIZC,EAAAA,MAAM,EAAE,OAJI;AAKZC,EAAAA,MAAM,EAAE,gBALI;AAMZC,EAAAA,OAAO,EAAE;AANG,CAAd;AAQA,MAAML,QAAQ,GAAG;AACbA,EAAAA,QAAQ,EAAE,UADG;AAEbC,EAAAA,KAAK,EAAE,MAFM;AAGbK,EAAAA,GAAG,EAAE;AAHQ,CAAjB;;AAMA,MAAMC,SAAN,SAAwBX,SAAxB,CAAkC;AAC9BY,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAChB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACbC,MAAAA,QAAQ,EAAE;AADG,KAAb;AAGH;;AAEDC,EAAAA,iBAAiB,GAAI,CACpB,CAV6B,CAY9B;;;AAEAC,EAAAA,WAAW,GAAG;AACd;AACA,QAAIC,MAAM,GAAGjB,EAAE,CAACkB,YAAH,CAAgB,8CAAhB,EAAgE,MAAhE,CAAb,CAFc,CAGd;;AACA,QAAIC,OAAO,GAAGF,MAAM,CAACG,KAAP,CAAa,GAAb,CAAd,CAJc,CAKd;;AACA,QAAIC,SAAS,GAAG,EAAhB,CANc,CAOd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA4B;AACxB;AACA,UAAIC,SAAJ;;AACA,SAAG;AACC;AACA,YAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBR,OAAO,CAACS,MAAnC,CAAX;AACAL,QAAAA,SAAS,GAAGJ,OAAO,CAACK,IAAD,CAAnB;AACH,OAJD,CAKA;AALA,aAMOH,SAAS,CAACQ,QAAV,CAAmBN,SAAnB,CANP,EAHwB,CAWxB;;;AACAF,MAAAA,SAAS,CAACS,IAAV,CAAeP,SAAf;AACH,KArBa,CAsBd;;;AACA,WAAOF,SAAP;AACH;;AAGGU,EAAAA,MAAM,GAAI;AACV;AACA,UAAM;AAAEjB,MAAAA;AAAF,QAAe,KAAKD,KAA1B;;AAEA,QAAIC,QAAQ,KAAK,IAAjB,EAAuB;AACnB,aAAO,YAAP;AACH;;AACG,QAAIkB,WAAJ;AACAA,IAAAA,WAAW,GAAGlB,QAAQ,CAACmB,GAAT,CAAcC,IAAD,iBACvB;AAAA,8BACA;AAAA,kBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAA,+BACI;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,SAAS,EAAC,eAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,uBAFA;AAAA,OAAUA,IAAV;AAAA;AAAA;AAAA;AAAA,YADU,CAAd;AASJ,wBACI;AAAA,8BACA;AAAI,QAAA,KAAK,EAAE/B,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEI;AAAK,QAAA,KAAK,EAAED,KAAZ;AAAA,wCAEI;AAAA,oBAAK8B;AAAL;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA,oBADJ;AASC;;AAnE6B;;AAsElC,eAAetB,SAAf","sourcesContent":["import React, { Component } from 'react'\n// declare 'require()' imports at the top of your script\nconst fs = require('fs');\n\n// style blocks\nconst panel = {\n  position: 'absolute',\n  right: '10px',\n  width: '200px',\n  height: '500px',\n  border: '1px solid #000',\n  padding: '2px'\n}\nconst position = {\n    position: 'absolute',\n    right: '50px',\n    top: '100px'\n}\n\nclass WordPanel extends Component {\n    constructor (props) {\n        super(props)\n\n        this.state = {\n        wordList: []\n        }\n    }\n\n    componentDidMount () {\n    }\n\n    // print random amount of words from a text file: https://stackoverflow.com/questions/56243621/print-random-amount-of-words-from-a-text-file\n    \n    randomWords() {\n    // Since you use 'readFileSync', there is no callback function\n    var readME = fs.readFileSync('lessthan30_frontend/public/wordlist10000.txt', 'utf8');\n    // Split the string into an array\n    var wordArr = readME.split(',');\n    // Create empty array\n    var randWords = [];\n    // push a random word to the new array n times\n    for (let i = 0; i < 30; i++){\n        // new random number\n        let newRandom;\n        do {\n            // New random index based on the length of the array (word count)\n            let rand = Math.floor(Math.random() * wordArr.length);\n            newRandom = wordArr[rand];\n        }\n        // Make sure we don't have duplicates\n        while (randWords.includes(newRandom));\n\n        // Add the new word to the array\n        randWords.push(newRandom);\n    }\n    // Join the array to a string and return it\n    return randWords\n}\n\n\n    render () {\n    // variable to hold the state \n    const { wordList } = this.state\n    \n    if (wordList === null) {\n        return 'Loading...'\n    }\n        let wordListJSX\n        wordListJSX = wordList.map((word) => (\n            <div key={word}>\n            <h3>{word}</h3>\n            <>\n                <button type=\"button\" className=\"btn btn-light\" >Add Word</button>\n            </>\n            </div>\n        ))\n\n    return (\n        <>\n        <h3 style={position}>Todays Words</h3>\n            <div style={panel}>\n                eggs\n                <ul>{wordListJSX}</ul>\n            </div>\n        </>\n    )\n    }\n}\n\nexport default WordPanel\n"]},"metadata":{},"sourceType":"module"}