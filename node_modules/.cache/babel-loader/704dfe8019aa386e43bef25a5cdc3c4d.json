{"ast":null,"code":"var _jsxFileName = \"/Users/heuchertc/sei/projects/lessthan30_django_env/lessthan30_frontend/src/components/Poems/PublicPoems.js\";\nimport React, { Component } from 'react';\nimport { indexPublicPoems, indexPublicWords } from '../../api/poem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass PublicPoems extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      poems: [],\n      words: []\n    };\n  }\n\n  componentDidMount() {\n    const {\n      user,\n      msgAlert\n    } = this.props;\n    indexPublicPoems(user).then(res => this.setState({\n      poems: res.data.poems\n    })).then(() => {\n      msgAlert({\n        heading: 'See all <30 Poems',\n        message: 'Look at allll those Poems',\n        variant: 'success'\n      });\n    }).catch(error => {\n      msgAlert({\n        heading: 'Index Failed',\n        message: 'Index error:' + error.message,\n        variant: 'danger'\n      });\n    });\n    indexPublicWords(user).then(res => this.setState({\n      words: res.data.words\n    }));\n  }\n\n  wordsForPoem(poemid) {\n    const {\n      words\n    } = this.state;\n    let poemwords = words.filter(word => word.poem === poemid);\n    let wordsJSX = poemwords.map(word => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"public-words\",\n      children: word.word\n    }, word.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this));\n    return wordsJSX;\n  }\n\n  render() {\n    const {\n      poems\n    } = this.state;\n\n    if (poems === null) {\n      return 'Loading...';\n    }\n\n    let poemJSX;\n\n    if (poems.length === 0) {\n      poemJSX = 'No poems created yet!';\n    } else {\n      // eslint-disable-next-line array-callback-return\n      poemJSX = poems.map(poem => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"public-poem\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: poem.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.wordsForPoem(poem.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }, this)]\n      }, poem.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Public Poems\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"font-link\",\n        children: poemJSX\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default PublicPoems;","map":{"version":3,"sources":["/Users/heuchertc/sei/projects/lessthan30_django_env/lessthan30_frontend/src/components/Poems/PublicPoems.js"],"names":["React","Component","indexPublicPoems","indexPublicWords","PublicPoems","constructor","props","state","poems","words","componentDidMount","user","msgAlert","then","res","setState","data","heading","message","variant","catch","error","wordsForPoem","poemid","poemwords","filter","word","poem","wordsJSX","map","id","render","poemJSX","length","title"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { indexPublicPoems, indexPublicWords } from '../../api/poem'\n\nclass PublicPoems extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      poems: [],\n      words: []\n    }\n  }\n\n  componentDidMount () {\n    const { user, msgAlert } = this.props\n\n    indexPublicPoems(user)\n      .then((res) => this.setState({ poems: res.data.poems }))\n      .then(() => {\n        msgAlert({\n          heading: 'See all <30 Poems',\n          message: 'Look at allll those Poems',\n          variant: 'success'\n        })\n      })\n      .catch((error) => {\n        msgAlert({\n          heading: 'Index Failed',\n          message: 'Index error:' + error.message,\n          variant: 'danger'\n        })\n      })\n    indexPublicWords(user)\n      .then((res) => this.setState({ words: res.data.words }))\n  }\n\nwordsForPoem (poemid) {\n    const { words } = this.state\n    let poemwords = words.filter((word) => word.poem === poemid)\n    let wordsJSX = poemwords.map((word) => (\n        <div key={word.id} className='public-words'>{word.word}</div>\n    ))\n    return wordsJSX\n}\n\n\nrender () {\n  const { poems } = this.state\n  if (poems === null) {\n    return 'Loading...'\n  }\n\n  let poemJSX\n  if (poems.length === 0) {\n    poemJSX = 'No poems created yet!'\n  } else {\n    // eslint-disable-next-line array-callback-return\n    poemJSX = poems.map((poem) => (\n      <div key={poem.id} className='public-poem'>\n        <h3>{poem.title}</h3>\n        \n        <div >{this.wordsForPoem(poem.id)}</div>\n\n      </div>\n    ))\n  }\n  return (\n    <>\n      <h1>Public Poems</h1>\n      <p></p>\n      <div className=\"font-link\">{poemJSX}</div>\n\n    </>\n  )\n}\n}\n\nexport default PublicPoems\n"]},"metadata":{},"sourceType":"module"}